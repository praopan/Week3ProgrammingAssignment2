makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## We are using << operator to assign a value to an object in an environment that is different from the current environment.
## For large square matrices, it may take too long to compute the inverse, especially if it has to be computed repeatedly.
## If the contents of the matrix do not change, it make make sense to cache the matrix inverse so we can use it again.
## Write a short comment describing this function
## makeCacheMatrix is creating a matrix containing a function to set the elements to the matrix, get the elements, set the elements and get the elements of the inverse matrix and
library (MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x  ##function to get matrix x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() {
inv <-ginv(x)
inver%*%X    ##to obtain inverse matrix
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## cacheSolve is calculating the invest of the matrix created with makeCacheMatrix
## It first checks to see if the inverse has already been calculated. If so, it gets the inverse from the cache and skips the calculation.
## Otherwise it calculates the inverse of the matrix and sets it in the cache via the setinverse function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
matrix_to_invert <- x$get()
inv <- solve(matrix_to_invert, ...)
x$setinverse(inv)
inv
}
f <-makeCacheMatrix(matrix(1:8),2,4)
f <-makeCacheMatrix(matrix(1:8,2,4)
f$get()
f <-makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getinv()
f$getinverse()
cacheSolve(f)
library (MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x  ##function to get matrix x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() {
inv <-ginv(x)
inverse%*%X    ##to obtain inverse matrix
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## cacheSolve is calculating the invest of the matrix created with makeCacheMatrix
## It first checks to see if the inverse has already been calculated. If so, it gets the inverse from the cache and skips the calculation.
## Otherwise it calculates the inverse of the matrix and sets it in the cache via the setinverse function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
matrix_to_invert <- x$get()
inv <- solve(matrix_to_invert, ...)
x$setinverse(inv)
inv
}
cacheSolve(f)
## Put comments here that give an overall description of what your
## functions do
## We are using << operator to assign a value to an object in an environment that is different from the current environment.
## For large square matrices, it may take too long to compute the inverse, especially if it has to be computed repeatedly.
## If the contents of the matrix do not change, it make make sense to cache the matrix inverse so we can use it again.
cacheSolve(f)
library (MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL         #initializing inverse as NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x   #function to get matrix x
setinv <- function(inverse)inv <<-inverse
getinv <- function() {
inver <- ginv(x)
inver%*%x    #function to obtain inverse of the matrix
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
##cachesolve is for getting the cache data
cacheSolve <- function(x, ...)
{
inv<<-x$getinv()
if(!is.null(inv)){ #checking if inverse is null
return(inv)
}        ## Return inverse value
}
data<-x$get()
## Write a short comment describing this function
##cachesolve is for getting the cache data
cacheSolve <- function(x, ...)
{
inv<<-x$getinv()
if(!is.null(inv)){ #checking if inverse is null
return(inv)
}        ## Return inverse value
}
data<-x$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
library (MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL         #initializing inverse as NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x   #function to get matrix x
setinv <- function(inverse)inv <<-inverse
getinv <- function() {
inver <- ginv(x)
inver%*%x    #function to obtain inverse of the matrix
}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
##cachesolve is for getting the cache data
cacheSolve <- function(x, ...)
{
inv<<-x$getinv()
if(!is.null(inv)){ #checking if inverse is null
return(inv)
}        ## Return inverse value
}
data<-x$get()
## Write a short comment describing this function
##cachesolve is for getting the cache data
cacheSolve <- function(x, ...)
{
inv<-x$getinv()
if(!is.null(inv)){ #checking if inverse is null
return(inv)
}        ## Return inverse value
}
data<-x$get()
cacheSolve <- function(x, ...)
{
inv<- x$getinv()
if(!is.null(inv)){ #checking if inverse is null
message("getting cached data!")
return(inv)
}        ## Return inverse value
}
data <- x$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
library (MASS)
makeCacheMatrix <- function(x = matrix()) {
## Write a short comment describing this function
##cachesolve is for getting the cache data
cacheSolve <- function(x, ...)
{
inv<- x$getinv()
if(!is.null(inv)){
message("getting cached data!")
return(inv)
}
data <- x$get()
inv <- solve(data,...)  #calculate inverse value
x$setinv(inv)
inv    ## return a matrix of inverse x
}
cacheSolve <- function(x, ...)
{
inv<- x$getinv()
if(!is.null(inv)){
message("getting cached data!")
return(inv)
}
data <- x$get()
inv <- solve(data,...)  #calculate inverse value
x$setinv(inv)
inv    ## return a matrix of inverse x
}
f <- makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getinv()
cacheSolve(f)
